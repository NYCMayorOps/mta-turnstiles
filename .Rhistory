df_ts_daily_entries %>%
group_by(id) %>%
filter(datetime == max(datetime)) %>%
ungroup() %>%
select(id, sign, datetime, entries) %>%
right_join(df_stations, by = "id")
df_ts_daily_entries %>%
group_by(id) %>%
filter(datetime == max(datetime)) %>%
ungroup() %>%
select(id, sign, datetime, entries) %>%
right_join(df_stations, by = "id") %>%
write(path("data", "turnstiles.csv"))
df_ts_daily_entries %>%
group_by(id) %>%
filter(datetime == max(datetime)) %>%
ungroup() %>%
select(id, sign, datetime, entries) %>%
right_join(df_stations, by = "id") %>%
write_csv(path("data", "turnstiles.csv"))
library(tidyverse)
library(lubridate)
library(fs)
library(scales)
library(vroom)
# data -------------------------------------
## download latest data ------------------------------------------
## updated weekly on saturdays
mta_base_url <- "http://web.mta.info/developers/data/nyct/turnstile/turnstile_"
latest_date <- floor_date(Sys.Date(), "week", 6)
latest_date_fmt <- label_date(format = "%y%m%d")(latest_date)
latest_date_url <- str_c(mta_base_url, latest_date_fmt, ".txt")
df_latest <- read_csv(
latest_date_url,
show_col_types = FALSE,
col_types = "cccccccccdd"
) %>%
set_names(str_to_lower(names(.))) %>%
rename(c_a = `c/a`) %>%
filter(!(division %in% c("PTH", "RIT"))) %>%
transmute(
id = str_c(c_a, unit, scp, sep = "_"),
datetime = mdy_hms(str_c(date, time, sep = " ")),
station,
linename,
entries
) %>%
arrange(id, datetime) %>%
write_csv(path("data", "2022", str_c(latest_date_fmt, ".csv")))
df_ts <- read_csv(path("data", "turnstiles.csv"))
df_last_weekly <- read_csv(path("output", "2022_station_counts.csv"))
df_latest
distinct(df_latest, id, station, linename) %>%
anti_join(df_ts, by = "id")
?break
df_ts_new <- distinct(df_latest, id, station, linename) %>%
anti_join(df_ts, by = "id") %>%
{
if (nrow(.) > 0) {
# TODO: Add email component here
df_stations <- read_csv(path("data", "station_conversion.csv"))
return(left_join(
.,
df_stations,
by = c("station", "linename")
) %>%
transmute(id, station = coalesce(station_new, station),
linename = coalesce(linename_new, linename),
lat = Latitude, lon = Longitude) %>%
bind_rows(df_ts) %>%
write_csv(path("data", "turnstiles.csv")))
} else {
return(.)
}
df_ts_new <- distinct(df_latest, id, station, linename) %>%
anti_join(df_ts, by = "id") %>%
{
if (nrow(.) > 0) {
# TODO: Add email component here
df_stations <- read_csv(path("data", "station_conversion.csv"))
left_join(
.,
df_stations,
by = c("station", "linename")
) %>%
transmute(id, station = coalesce(station_new, station),
linename = coalesce(linename_new, linename),
lat = Latitude, lon = Longitude) %>%
bind_rows(df_ts) %>%
write_csv(path("data", "turnstiles.csv"))
} else {
.
}
df_ts_new
glimpse(df_latest)
df_ts
bind_rows(
select(df_ts, id, datetime, entries),
select(df_latest, id, datetime, entries)
)
bind_rows(
select(df_ts, id, datetime, entries),
select(df_latest, id, datetime, entries)
) %>%
arrange(id, datetime)
df_daily <- bind_rows(
select(df_ts, id, datetime, entries),
select(df_latest, id, datetime, entries)
) %>%
arrange(id, datetime) %>%
group_by(id) %>%
mutate(d_entries = entries - lag(entries),
d_time    = (datetime %--% lag(datetime)) %/% hours()) %>%
ungroup()
df_daily
bind_rows(
select(df_ts, id, datetime, entries),
select(df_latest, id, datetime, entries)
) %>%
arrange(id, datetime) %>%
group_by(id) %>%
mutate(d_entries = entries - lag(entries),
d_time    = (datetime %--% lag(datetime)) %/% hours()) %>%
ungroup() %>%
left_join(select(df_ts, id, sign), by = "id") %>%
filter(sign * d_entries >= 0)
bind_rows(
select(df_ts, id, datetime, entries),
select(df_latest, id, datetime, entries)
) %>%
arrange(id, datetime) %>%
group_by(id) %>%
mutate(d_entries = entries - lag(entries)) %>%
ungroup() %>%
left_join(select(df_ts, id, sign), by = "id") %>%
filter(sign * d_entries < 0)
df_latest %>% filter(id == "A015_R081_00-03-01")
df_latest %>% filter(id == "A015_R081_00-03-01") %>% View
df_latest %>% filter(id == "B019_R149_00-00-01") %>% View
df_ts
df_daily
df_weekly <- filter(
df_daily,
hour(datetime) %in% c(8:11, 18:21) |
wday(datetime) %in% c(1,7)
) %>%
mutate(
weekdate = floor_date(datetime, unit = "week", week_start = 1),
time = map_chr(
datetime,
~ case_when(
wday(.) %in% c(1,7) ~ "weekend",
hour(.) <= 11 ~ "weekday_am",
hour(.) >  11 ~ "weekday_pm"
)
) %>%
left_join(df_stations, by = "id") %>%
group_by(linename, station, weekdate, time) %>%
summarise(entries = sum(d_entries),
.groups = "drop") %>%
pivot_wider(names_from = time,
values_from = entries) %>%
write_csv(path("output", str_c("test", yr_outfile)), na = "")
filter(
df_daily,
hour(datetime) %in% c(8:11, 18:21) |
wday(datetime) %in% c(1,7)
) %>%
mutate(
weekdate = floor_date(datetime, unit = "week", week_start = 1),
time = map_chr(
datetime,
~ case_when(
wday(.) %in% c(1,7) ~ "weekend",
hour(.) <= 11 ~ "weekday_am",
hour(.) >  11 ~ "weekday_pm"
)
tictoc::tic()
df_weekly <- filter(
df_daily,
hour(datetime) %in% c(8:11, 18:21) |
wday(datetime) %in% c(1,7)
) %>%
mutate(
weekdate = floor_date(datetime, unit = "week", week_start = 1),
time = map_chr(
datetime,
~ case_when(
wday(.) %in% c(1,7) ~ "weekend",
hour(.) <= 11 ~ "weekday_am",
hour(.) >  11 ~ "weekday_pm"
)
) %>%
left_join(df_ts, by = "id") %>%
group_by(linename, station, weekdate, time) %>%
summarise(entries = sum(d_entries),
.groups = "drop") %>%
pivot_wider(names_from = time,
values_from = entries) %>%
write_csv(path("output", str_c("test", yr_outfile)), na = "")
tictoc::toc()
tictoc::tic()
df_weekly <- filter(
df_daily,
hour(datetime) %in% c(8:11, 18:21) |
wday(datetime) %in% c(1,7)
) %>%
mutate(
weekdate = floor_date(datetime, unit = "week", week_start = 1),
time = map_chr(
datetime,
~ case_when(
wday(.) %in% c(1,7) ~ "weekend",
hour(.) <= 11 ~ "weekday_am",
hour(.) >  11 ~ "weekday_pm"
)
) %>%
left_join(df_ts, by = "id") %>%
group_by(linename, station, weekdate, time) %>%
summarise(entries = sum(d_entries),
.groups = "drop") %>%
pivot_wider(names_from = time,
values_from = entries) %>%
write_csv(path("output", str_c("test", "2022_station_counts.csv")), na = "")
tictoc::toc()
df_weekly
df_last_weekly
filter(
df_daily,
hour(datetime) %in% c(8:11, 18:21) |
wday(datetime) %in% c(1,7)
) %>%
mutate(
weekdate = floor_date(datetime, unit = "week", week_start = 1),
time = map_chr(
datetime,
~ case_when(
wday(.) %in% c(1,7) ~ "weekend",
hour(.) <= 11 ~ "weekday_am",
hour(.) >  11 ~ "weekday_pm"
)
) %>%
left_join(df_ts, by = "id") %>%
group_by(linename, station, weekdate, time) %>%
summarise(entries = sum(d_entries),
.groups = "drop")
filter(
df_daily,
hour(datetime) %in% c(8:11, 18:21) |
wday(datetime) %in% c(1,7)
) %>%
mutate(
weekdate = floor_date(datetime, unit = "week", week_start = 1),
time = map_chr(
datetime,
~ case_when(
wday(.) %in% c(1,7) ~ "weekend",
hour(.) <= 11 ~ "weekday_am",
hour(.) >  11 ~ "weekday_pm"
)
) %>%
left_join(df_ts, by = "id") %>%
group_by(linename, station, weekdate, time) %>%
summarise(entries = sum(d_entries),
.groups = "drop") %>% head(n = 10) %>% knitr::kable("simple")
filter(
df_daily,
hour(datetime) %in% c(8:11, 18:21) |
wday(datetime) %in% c(1,7)
) %>%
mutate(
weekdate = floor_date(datetime, unit = "week", week_start = 1),
time = map_chr(
datetime,
~ case_when(
wday(.) %in% c(1,7) ~ "weekend",
hour(.) <= 11 ~ "weekday_am",
hour(.) >  11 ~ "weekday_pm"
)
) %>%
left_join(df_ts, by = "id") %>%
group_by(linename, station, weekdate, time) %>%
summarise(entries = sum(d_entries),
.groups = "drop") %>% head(n = 10) %>% knitr::kable("simple") %>% clipr::write_clip()
filter(
df_daily,
hour(datetime) %in% c(8:11, 18:21) |
wday(datetime) %in% c(1,7)
) %>%
mutate(
weekdate = floor_date(datetime, unit = "week", week_start = 1),
time = map_chr(
datetime,
~ case_when(
wday(.) %in% c(1,7) ~ "weekend",
hour(.) <= 11 ~ "weekday_am",
hour(.) >  11 ~ "weekday_pm"
)
) %>%
left_join(df_ts, by = "id") %>%
group_by(linename, station, weekdate, time) %>%
summarise(entries = sum(d_entries),
.groups = "drop") %>%
pivot_wider(names_from = time,
values_from = entries) %>%
head(n = 10) %>% knitr::kable("simple") %>% clipr::write_clip()
df_weekly <- filter(
df_daily,
hour(datetime) %in% c(8:11, 18:21) |
wday(datetime) %in% c(1,7)
) %>%
mutate(
weekdate = floor_date(datetime, unit = "week", week_start = 1),
time = map_chr(
datetime,
~ case_when(
wday(.) %in% c(1,7) ~ "weekend",
hour(.) <= 11 ~ "weekday_am",
hour(.) >  11 ~ "weekday_pm"
)
) %>%
left_join(df_ts, by = "id") %>%
group_by(linename, station, weekdate, time) %>%
summarise(entries = sum(d_entries),
.groups = "drop")
df_weekly
df_last_weekly
df_old_weekly <- read_csv(path("output", "2022_station_counts.csv"))
merge1 <- function (new, old) {
## transform old longer
## bind rows
## transform wider
pivot_longer(
c(weekend, weekday_am, weekday_pm),
names_to = "time",
values_to = "entries",
values_drop_na = TRUE
) %>%
bind_rows(new) %>%
pivot_wider(
names_from = time,
values_from = entries
)
}
merge1(df_weekly, df_old_weekly)
merge1 <- function (new, old) {
## transform old longer
## bind rows
## transform wider
pivot_longer(
old
c(weekend, weekday_am, weekday_pm),
names_to = "time",
values_to = "entries",
values_drop_na = TRUE
) %>%
bind_rows(new) %>%
pivot_wider(
names_from = time,
values_from = entries
)
}
merge1 <- function (new, old) {
## transform old longer
## bind rows
## transform wider
pivot_longer(
old,
c(weekend, weekday_am, weekday_pm),
names_to = "time",
values_to = "entries",
values_drop_na = TRUE
) %>%
bind_rows(new) %>%
pivot_wider(
names_from = time,
values_from = entries
)
}
merge1(df_weekly, df_old_weekly)
merge1 <- function (new, old) {
## transform old longer
## bind rows
## transform wider
pivot_longer(
old,
c(weekend, weekday_am, weekday_pm),
names_to = "time",
values_to = "entries",
values_drop_na = TRUE
) %>%
bind_rows(new)
}
merge1(df_weekly, df_old_weekly)
merge1(df_weekly, df_old_weekly) %>% group_by(linename, station, weekdate, time) %>% filter(n() > 1)
merge1(df_weekly, df_old_weekly) %>% group_by(linename, station, weekdate, time) %>% filter(n() > 1) %>% arrange(linename, station, weekdate, time)
merge1 <- function (new, old) {
## transform old longer
## bind rows
## transform wider
pivot_longer(
old,
c(weekend, weekday_am, weekday_pm),
names_to = "time",
values_to = "entries",
values_drop_na = TRUE
) %>%
bind_rows(filter(new, complete.cases(new))) %>%
pivot_wider(names_from = time,
values_from = entries)
}
merge1(df_weekly, df_old_weekly)
merge1(df_weekly, df_old_weekly) %>% View
merge2 <- function (new, old) {
## transform new wider
## join???
## coalesce???
pivot_wider(
new,
names_from = time,
values_from = entries
) %>%
full_join(
old,
by = c("linename", "station", "weekdate"),
suffix = c(".new", ".old")
) %>%
transmute(
linename,
station,
weekdate,
weekend = coalesce(weekend.new, weekend.old),
weekday_am = coalesce(weekday_am.new, weekday_am.old),
weekday_pm = coalesce(weekday_pm.new, weekday_pm.old)
)
}
merge2(df_weekly, df_old_weekly)
merge1(df_weekly, df_old_weekly)
merge2 <- function (new, old) {
## transform new wider
## join???
## coalesce???
pivot_wider(
new,
names_from = time,
values_from = entries
) %>%
full_join(
old,
by = c("linename", "station", "weekdate"),
suffix = c(".new", ".old")
) %>%
transmute(
linename,
station,
weekdate,
weekend = coalesce(weekend.new, weekend.old),
weekday_am = coalesce(weekday_am.new, weekday_am.old),
weekday_pm = coalesce(weekday_pm.new, weekday_pm.old)
) %>%
arrange(linename, station, weekdate)
}
merge2(df_weekly, df_old_weekly)
install.packages("microbenchmark")
?microbenchmark::microbenchmark
mb <- microbenchmark::microbenchmark(
long_bind = merge1(df_weekly, df_old_weekly),
wide_join = merge2(df_weekly, df_old_weekly),
unit = "seconds",
check = "equal"
)
m1 = merge1(df_weekly, df_old_weekly)
m2 = merge2(df_weekly, df_old_weekly)
dplyr::all_equal(m1, m2)
mb <- microbenchmark::microbenchmark(
long_bind = merge1(df_weekly, df_old_weekly),
wide_join = merge2(df_weekly, df_old_weekly),
unit = "seconds"
)
mb
plot(mb)
autoplot(mb)
merge2 <- function (new, old) {
## transform new wider
## join???
## coalesce???
pivot_wider(
new,
names_from = time,
values_from = entries
) %>%
full_join(
old,
by = c("linename", "station", "weekdate"),
suffix = c(".new", ".old")
) %>%
transmute(
linename,
station,
weekdate,
weekend = coalesce(weekend.new, weekend.old),
weekday_am = coalesce(weekday_am.new, weekday_am.old),
weekday_pm = coalesce(weekday_pm.new, weekday_pm.old)
)
}
mb <- microbenchmark::microbenchmark(
long_bind = merge1(df_weekly, df_old_weekly),
wide_join = merge2(df_weekly, df_old_weekly),
unit = "seconds"
)
autoplot(mb)
mb
